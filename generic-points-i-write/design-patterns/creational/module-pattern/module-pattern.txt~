Module pattern is a toolbox witch contains functions inside it to use.
these methods are related to to do a Task withc is seprete from other tasks.

this pattern is simply an object literal witch has functions as keys and values.

var module = {
	method: function(){...},
	nextMethod: function(){...}
}

we create the module as a variable and assign an object to it and create 
functions as keys and values in the object.
in order to access the functions we can cal it like module.methodname();

the diference between module pattern and constructor pattern is that generaly
in the module patern we will have one object, one service to handle so it dose
all my work an a spesific task.


Revealing Module pattern:

we can create a self-invoked function witch returns the object we want as
a module but in this case we can have private methods and variable inside the
function scope and only reveale the APIs we want othe to get access to.
and donnt give access to the variables we are using inside the module.


var module = (function(){
	_privateVar = 'value'
	_privateMethod(){...}
	method(){...};
	nextMethod(){...};

	//this is the object module we are returning and storing in the 
	//var module
	return {
		method: method,
		nextMethod: nextMethod
	}

})();







-self-containd module
  -everything to do with my module is in my module
  -no global variables
  -if a module manages more than one thing it should be split up
-separation of concerns
-DRY code: dont repeat yor self
efficient DOM usage
  -very few selections and more DOM caching.
-no memory leaks
  -all events can be unbound

object literal module:
  the object will be in the self-invoked funcions so the variable sotores the 
  object wont be a global varibale.

  the object would have a init function witch run other functions as DOMCacher()
  bindEvents() render(){this will render the changes to the DOM} and ... so on.

  the obj.init() will be called inside the slef-invoked function.
  
  all we want to declare inside a method would be part of the object we are 
  making so we declare them as: this.property = value  .


Revealing Pattern:

  in the revealing pattern we make an anonymus function and asign it the a
  variable and the function will return an object with only the public 
  properties we added to the object returned.
  so the function will run and declare var s and functions and return them as 
  methods in the object returned

the public methods and properties names are presets with ( underscore _ )
like _render() and so on.







