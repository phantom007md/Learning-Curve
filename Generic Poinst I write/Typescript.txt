---------------------------------------------------------------------------------------------------------------------

Type Synx:

let isDone: boolean = false;         				//boolean keyword
let decimal: number = 6;        				//number keyword
let color: string = "blue";                                     //string keyword

let list: number[] = [1, 2, 3];      				//number keyword followed with arrays
The second way uses a generic array type, Array<elemType>:	 
	let list: Array<number> = [1, 2, 3];			//Array Interface

// Declare a tuple type
	let x: [string, number];				//number keyword, string keyword

// Function returning never must have unreachable end point
function error(message: string): never {
    throw new Error(message);
}
function infiniteLoop(): never {
    while (true) {
    }
}

Type assertions:
let strLength: number = (someValue as string).length;
let strLength: number = (<string>someValue).length;
---------------------------------------------------------------------------------------------------------------------

sample: var varName:type = value ;
	var foo:string = "sometext"

---------------------------------------------------------------------------------------------------------------------

function function_name():return_type { 
   //statements 
   return value; 
}
The return_type can be any valid data type.
A returning function must end with a return statement.
A function can return at the most one value. In other words, there can be only one return statement per function.
The data type of the value returned must match the return type of the function.

---------------------------------------------------------------------------------------------------------------------

Union Type :gives programs the ability to combine one or two types
	var val:string|number 
		val can get values with type string or number

	function samp(name:string|string[]) { 

---------------------------------------------------------------------------------------------------------------------
----Important-----
namespace SomeNameSpaceName { 
   export interface ISomeInterfaceName {      }  
   export class SomeClassName {      }  
} 

Interface is a syntax structure for objects and classes in TS and make rules which a class must follow.
interface IPerson { 
   firstName:string, 
   lastName:string, 
   sayHi: ()=>string 
} 

var customer:IPerson = { 
   firstName:"Tom",
   lastName:"Hanks", 
   sayHi: ():string =>{return "Hi there"} 
} 
	if any props or methods are lost in the class witch was declared as needed in the interface it will  cuz an error.

function(p1:IPerson,p2)

---------------------------------------------------------------------------------------------------------------------

Namespace -->

	In gulpfile     target: 'ES5', module: 'es2015' are not needed
	
    			outFile: './dist/ts/bookingroom.js' is needed

			if u are usning a any other TS file in ur current TS file u should import it for the tsc(typescript compile)
			it is the /// <reference path="./util.ts"/> called triple slash refrecing!

			any class in the namespace should be exported using (export) keyword even if ur not refrencing it in an other class or importing it any where.
			
			outFile option is for namespace compile
			outDir is for normal compile.

---------------------------------------------------------------------------------------------------------------------

linter would not be activated if tsconfig.json is not placed in ur directory.

---------------------------------------------------------------------------------------------------------------------

selectedElement instanceof HTMLSelectElement
	->HTMLSelectElement is an object of dome
	we are checking if the element we select is an instance of the DOM object
	The DOM objects are parsed with the API built in the browser.

:Node and :Element are generic interfaces.

---------------------------------------------------------------------------------------------------------------------

interfaces can be defined on variables witch have objects in themselves or refrencing it.

---------------------------------------------------------------------------------------------------------------------

Declaring the type of something by typescript can be something:keyword  or  something:Interface
and Interfaces bigin with uppercase letter.

---------------------------------------------------------------------------------------------------------------------

Optional Prameters can be set with question mark(?).

function functionName(OptPrameter?, Parameter){
	//statement
}

---------------------------------------------------------------------------------------------------------------------

Recursion :

function factorial(number) {
   if (number <= 0) {         // termination case
      return 1; 
   } else {     
      return (number * factorial(number - 1));     // function invokes itself
   } 
};

---------------------------------------------------------------------------------------------------------------------

Function Overloads
a program can have multiple methods with the same name with different implementation.
methods with different signature.

-Function signature includes the following things:

	The data type of the parameter  function disp(string):void;   function disp(number):void;
	The number of parameters   	function disp(n1:number):void;   function disp(x:number,y:number):void;
	The sequence of parameters      function disp(n1:number,s1:string):void;   function disp(s:string,n:number):void;

Usage Example

function disp(s1:string):void; 
function disp(n1:number,s1:string):void; 

function disp(x:any,y?:any):void { 
   console.log(x); 
   console.log(y); 
} 
disp("abc") 
disp(1,"xyz");
---------------------------------------------------------------------------------------------------------------------


