JavaScript provides three different value-comparison operations:

strict equality (or "triple equals" or "identity") using ===,
loose equality ("double equals") using ==,
and Object.is (new in ECMAScript 2015).
-----

loose equality (==) do a type convertion before comparing the values and 
returning the result.
strict equality (===) compare two values with their own type and return false 
simply if the type of the two values is defer to eachother.

NaN ==  NaN //falss
NaN === NaN //falss

+0  == -0   //true
+0  === -0   //true

--------------------------
var x = +"1";  // converting string 1 to number 1.
--------------------------

Traditionally, and according to ECMAScript, all objects are loosely unequal to 
undefined and null.

null === undefined  //
false

null ==  undefined
   //true

any object can emulate null and undefined are loosly equal to null or undefined

anyObject === null       //false
anyObject === undefined  //false

strict equal is better as no type coercion takes place the evaluation may be 
faster.

Same-value equality:
Same-value equality addresses a final use case: determining whether two values 
are functionally identical in all contexts.  (This use case demonstrates an 
instance of the Liskov substitution principle.) One instance occurs when an 
attempt is made to mutate an immutable property:
Object.defineProperty will throw an exception when attempting to change an 
immutable property would actually change it, but it does nothing if no actual 
change is requested.  If v is -0, no change has been requested, and no error 
will be thrown.  But if v is +0, Number.NEGATIVE_ZERO would no longer have its 
immutable value.  Internally, when an immutable property is redefined, the 
newly-specified value is compared against the current value using same-value 
equality.
Same-value equality is provided by the Object.is method.


same-equality and strict equality algorithms are nearly the same but deffers
when handling numbers.
this difference in the algorithms are exposed bu the Object.is() method.

Object.is isn't simply "looser" than double equals or "stricter" than triple 
equals, nor does it fit somewhere in between

Here's an in-exhaustive list of built-in methods and operators that might cause a distinction between -0 and +0 to manifest itself in your code:
Math.atan2
Math.ceil
Math.pow
Math.round
Math.floor
Math.max
Math.min
Math.sin
Math.sqrt
Math.tan





