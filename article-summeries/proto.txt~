When an inherited function is executed, the value of this points to the 
inheriting object, not to the prototype object where the function is an own 
property.

To check whether an object has a property defined on itself and not somewhere on
its prototype chain, it is necessary to use the hasOwnProperty method which all
objects inherit from Object.prototype.

hasOwnProperty is the only thing in JavaScript which deals with properties and 
does not traverse the prototype chain.

Note: It is not enough to check whether a property is undefined. The property
might very well exist, but its value just happens to be set to undefined.

[[Prototype]] is looked at recursively, i.e. a1.doSomething, 
Object.getPrototypeOf(a1).doSomething, 
Object.getPrototypeOf(Object.getPrototypeOf(a1)).doSomething etc., 
until it's found or Object.getPrototypeOf returns null.
